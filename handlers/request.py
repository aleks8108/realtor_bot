"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—à–∞–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Contact, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from exceptions.custom_exceptions import ValidationError
from states.request import RequestStates
from utils.keyboards import (
    get_property_type_keyboard, get_deal_type_keyboard, get_district_keyboard,
    get_budget_keyboard, get_rooms_keyboard, get_listing_menu, get_main_menu
)
from services.listings import ListingService
from services.sheets import google_sheets_service
from config import ADMIN_ID
from utils.validators import validate_phone, validate_name
import logging
import re
from datetime import datetime, timezone, timedelta

router = Router()
logger = logging.getLogger(__name__)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel
@router.message(Command("cancel"))
async def cancel_action(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel.
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu())
    logger.info(f"ID: {message.from_user.id} (@{message.from_user.username}) - –û—Ç–º–µ–Ω–µ–Ω–æ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∫–Ω–æ–ø–∫–∞)
@router.callback_query(F.data == "return_to_menu")
async def return_to_main_menu(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'.
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    await state.clear()
    await callback.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu())
    logger.info(f"ID: {callback.from_user.id} (@{callback.from_user.username}) - –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@router.message(StateFilter(RequestStates.name))
async def process_name(message: Message, state: FSMContext):
    name = message.text.strip()
    try:
        validated_name = validate_name(name)
        await state.update_data(name=validated_name)
        logger.info(f"ID: {message.from_user.id} (@{message.from_user.username}) - –í–≤–æ–¥ –∏–º–µ–Ω–∏: {validated_name} - {message.date}")
        builder = ReplyKeyboardBuilder()
        builder.add(KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True))
        builder.adjust(1)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +7 999 123 45 67) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç:",
                             reply_markup=builder.as_markup(resize_keyboard=True,
                                                           input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 XXX XXX XX XX"))
        await state.set_state(RequestStates.phone)
    except ValidationError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–µ–Ω–∏: {str(e)}")
        await message.answer(f"‚ö†Ô∏è {str(e)}! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (2-50 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã).\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
@router.message(StateFilter(RequestStates.phone))
async def process_phone(message: Message, state: FSMContext):
    phone = None
    if isinstance(message.contact, Contact):
        phone = message.contact.phone_number
        logger.info(f"ID: {message.from_user.id} (@{message.from_user.username}) - –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç: {phone} - {message.date}")
    else:
        phone = message.text.strip()
        logger.info(f"ID: {message.from_user.id} (@{message.from_user.username}) - –í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone} - {message.date}")

    try:
        validated_phone = validate_phone(phone)
        await state.update_data(phone=validated_phone)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:", reply_markup=get_property_type_keyboard())
        await state.set_state(RequestStates.property_type)
    except ValidationError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {str(e)}")
        await message.answer(f"‚ö†Ô∏è {str(e)}! –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 XXX XXX XX XX, –Ω–∞–ø—Ä–∏–º–µ—Ä, +7 999 123 45 67.\n"
                             "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n- –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +7, 8 –∏–ª–∏ 7.\n- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–æ–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç 11 —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ +7 –∏–ª–∏ 10 —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ 8.\n"
                             "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                             reply_markup=ReplyKeyboardBuilder().add(KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)).adjust(1).as_markup(
                                 resize_keyboard=True, input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 XXX XXX XX XX"))
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (callback)
@router.callback_query(F.data.startswith("property_type_"), StateFilter(RequestStates.property_type))
async def process_property_type(callback: CallbackQuery, state: FSMContext):
    property_type = callback.data.replace("property_type_", "")
    await state.update_data(property_type=property_type)
    logger.info(f"ID: {callback.from_user.id} (@{callback.from_user.username}) - –í—ã–±–æ—Ä —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: {property_type}")
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–¥–µ–ª–∫–∏:", reply_markup=get_deal_type_keyboard())
    await state.set_state(RequestStates.deal_type)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏ (callback)
@router.callback_query(F.data.startswith("deal_type_"), StateFilter(RequestStates.deal_type))
async def process_deal_type(callback: CallbackQuery, state: FSMContext):
    deal_type = callback.data.replace("deal_type_", "")
    await state.update_data(deal_type=deal_type)
    logger.info(f"ID: {callback.from_user.id} (@{callback.from_user.username}) - –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏: {deal_type}")
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:", reply_markup=get_district_keyboard())
    await state.set_state(RequestStates.district)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–∞ (callback)
@router.callback_query(F.data.startswith("val_district_"), StateFilter(RequestStates.district))
async def process_district(callback: CallbackQuery, state: FSMContext):
    district = callback.data.replace("val_district_", "")
    await state.update_data(district=district)
    logger.info(f"ID: {callback.from_user.id} (@{callback.from_user.username}) - –í—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞: {district}")
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç:", reply_markup=get_budget_keyboard())
    await state.set_state(RequestStates.budget)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±—é–¥–∂–µ—Ç–∞ (callback)
@router.callback_query(F.data.startswith("budget_"), StateFilter(RequestStates.budget))
async def process_budget(callback: CallbackQuery, state: FSMContext):
    budget_str = callback.data.replace("budget_", "")
    budget_max = int(budget_str.split("-")[1]) if "-" in budget_str else int(budget_str)
    await state.update_data(budget=budget_max)
    logger.info(f"ID: {callback.from_user.id} (@{callback.from_user.username}) - –í—ã–±–æ—Ä –±—é–¥–∂–µ—Ç–∞: {budget_max}")
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:", reply_markup=get_rooms_keyboard())
    await state.set_state(RequestStates.rooms)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç (callback)
@router.callback_query(F.data.startswith("rooms_"), StateFilter(RequestStates.rooms))
async def process_rooms(callback: CallbackQuery, state: FSMContext):
    rooms_data = callback.data.replace("rooms_", "")
    if rooms_data.lower() == "none":
        rooms = None  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º None –¥–ª—è "–Ω–µ –≤–∞–∂–Ω–æ"
    else:
        rooms = int(rooms_data)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ "–Ω–µ –≤–∞–∂–Ω–æ"
    await state.update_data(rooms=rooms)
    logger.info(f"ID: {callback.from_user.id} (@{callback.from_user.username}) - –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç: {rooms_data}")
    data = await state.get_data()
    search_criteria = {
        "property_type": data.get("property_type"),
        "deal_type": data.get("deal_type"),
        "district": data.get("district"),
        "budget": str(data.get("budget")),
        "rooms": rooms  # –ü–µ—Ä–µ–¥–∞–µ–º None –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ
    }
    listings = await ListingService.get_filtered_listings(search_criteria)
    if listings:
        await state.update_data(filtered_listings=listings, selected_properties=[])
        for i, listing in enumerate(listings):
            text = f"üÜî ID: {listing.get('id', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            address = listing.get('address', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')
            logger.info(f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞: {listing}")
            text += f"üè† –ê–¥—Ä–µ—Å: {address if address.strip() else '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            if listing.get('description'):
                text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {listing.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            if listing.get('floor'):
                text += f"üè¢ –≠—Ç–∞–∂: {listing.get('floor', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            area = listing.get('area', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
            if area.lower() in ['–Ω–µ—Ç', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'] or not area.replace('.', '').replace('–º¬≤', '').strip().isdigit():
                match = re.search(r'([0-9]+(?:[.,][0-9]+)?)\s?–º¬≤', listing.get('description', ''))
                area = f"{match.group(1).replace(',', '.') if match else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} –º¬≤"
                logger.debug(f"–ò–∑–≤–ª–µ—á—ë–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è: {area}")
            else:
                area = f"{area} –º¬≤"
                logger.debug(f"–ü–ª–æ—â–∞–¥—å –∏–∑ –ø–æ–ª—è area: {area}")
            text += f"üè¢ –ü–ª–æ—â–∞–¥—å: {area}\n"
            if listing.get('contact_info'):
                text += f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {listing.get('contact_info', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}\n"
            photo_urls = ListingService.get_property_photos(listing)
            if photo_urls:
                for j, url in enumerate(photo_urls):
                    try:
                        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {url}")
                        await callback.message.answer_photo(photo=url, caption=text if j == 0 else None)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ {url}: {e}")
                        await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–¥–Ω–æ –∏–∑ —Ñ–æ—Ç–æ.")
            else:
                await callback.message.answer(text)
            keyboard = get_listing_menu(
                listing_exists=True,
                comments_provided=False,
                has_next_listing=(i < len(listings) - 1),
                listing_index=i,
                photo_index=0,
                total_photos=len(photo_urls),
                total_listings=len(listings),
                listing_id=listing.get('id')
            )
            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        await state.set_state(RequestStates.select_property)
    else:
        await callback.message.edit_text("–û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏.", reply_markup=None)
        await complete_request(callback.message, state)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ (callback)
@router.callback_query(F.data.startswith("request_"), StateFilter(RequestStates.select_property))
async def process_select_property(callback: CallbackQuery, state: FSMContext):
    property_id = int(callback.data.replace("request_", ""))
    data = await state.get_data()
    filtered_listings = data.get("filtered_listings", [])
    selected_properties = data.get("selected_properties", [])
    selected_property = next((l for l in filtered_listings if str(l.get('id')) == str(property_id)), None)
    if selected_property:
        if str(property_id) not in [p.get('id') for p in selected_properties]:
            selected_properties.append(selected_property)
            await state.update_data(selected_properties=selected_properties)
            logger.info(f"ID: {callback.from_user.id} (@{callback.from_user.username}) - –î–æ–±–∞–≤–ª–µ–Ω –æ–±—ä–µ–∫—Ç —Å ID: {property_id}")
        else:
            logger.info(f"ID: {callback.from_user.id} (@{callback.from_user.username}) - –û–±—ä–µ–∫—Ç —Å ID: {property_id} —É–∂–µ –≤—ã–±—Ä–∞–Ω")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–±—ä–µ–∫—Ç", callback_data="add_more")],
            [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="complete")]
        ])
        await callback.message.edit_text(f"–û–±—ä–µ–∫—Ç —Å ID {property_id} –≤—ã–±—Ä–∞–Ω. –í—ã–±—Ä–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(selected_properties)}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ—â—ë –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
@router.callback_query(F.data.in_(["add_more", "complete"]), StateFilter(RequestStates.select_property))
async def process_selection_action(callback: CallbackQuery, state: FSMContext):
    if callback.data == "add_more":
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –æ–±—ä–µ–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=None)
    elif callback.data == "complete":
        data = await state.get_data()
        selected_properties = data.get("selected_properties", [])
        if not selected_properties:
            await callback.message.edit_text("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
            await state.clear()
            return
        await state.update_data(selected_properties=selected_properties)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞—è–≤–∫–µ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip):")
        await state.set_state(RequestStates.comments)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
@router.message(StateFilter(RequestStates.comments))
async def complete_request(message: Message, state: FSMContext):
    data = await state.get_data()
    comments = message.text.strip() if message.text != "/skip" else "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
    await state.update_data(comments=comments)
    selected_properties = data.get("selected_properties", [])
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç Moscow (UTC+3)
    moscow_offset = timedelta(hours=3)
    moscow_time = (message.date.replace(tzinfo=timezone.utc) + moscow_offset).strftime("%d-%m-%Y %H:%M")
    for i, prop in enumerate(selected_properties):
        request_data = {
            "timestamp": moscow_time,
            "user_id": message.from_user.id,
            "username": message.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω",
            "user_name": data.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω"),
            "phone": data.get("phone", "–ù–µ —É–∫–∞–∑–∞–Ω"),
            "property_id": prop.get("id", "N/A"),
            "property_address": prop.get("address", "–ù–µ —É–∫–∞–∑–∞–Ω"),
            "comments": comments
        }
        try:
            await google_sheets_service.save_request(request_data)
            logger.info(f"–ó–∞—è–≤–∫–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ID {prop.get('id')} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ID {prop.get('id')}: {str(e)}")
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ID {prop.get('id')}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()
            return
    await message.answer("–í—Å–µ –∑–∞—è–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! –ù–∞—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=None)
    await state.clear()