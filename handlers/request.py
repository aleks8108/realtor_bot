
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import CallbackQuery
from aiogram.types import Message
from aiogram.exceptions import TelegramBadRequest
from states.request import RequestStates
from services.sheets import save_request, get_listings
from config import ADMIN_ID
from utils.keyboards import get_property_type_keyboard, get_deal_type_keyboard, get_district_keyboard, get_budget_keyboard, get_start_reply_keyboard, get_rooms_keyboard, get_listing_menu, get_menu_and_clear_buttons, get_main_menu
import logging
import asyncio

logging.basicConfig(filename='bot.log', level=logging.INFO, encoding='utf-8')
router = Router()

@router.message(F.text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def start_request(message: types.Message, state: FSMContext):
    logging.info(f"–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=get_menu_and_clear_buttons())
    await state.set_state(RequestStates.name)

@router.message(RequestStates.name)
async def process_name(message: types.Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–º—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
    if not message.text or not message.text.strip():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è.", reply_markup=get_menu_and_clear_buttons())
        return
    await state.update_data(name=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ Telegram):",
                        reply_markup=types.ReplyKeyboardMarkup(
                            keyboard=[[types.KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]],
                            resize_keyboard=True,
                            one_time_keyboard=True
                        ))
    await state.set_state(RequestStates.phone)

@router.message(RequestStates.phone, F.contact | F.text)
async def process_phone(message: types.Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    phone = message.contact.phone_number if message.contact else message.text.strip()
    if not phone or not any(c.isdigit() for c in phone):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", reply_markup=get_menu_and_clear_buttons())
        return
    await state.update_data(phone=phone)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:", reply_markup=get_property_type_keyboard())
    await state.set_state(RequestStates.property_type)

@router.callback_query(RequestStates.property_type)
async def process_property_type(callback: types.CallbackQuery, state: FSMContext):
    logging.info(f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {callback.data}")
    await state.update_data(property_type=callback.data)
    try:
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–¥–µ–ª–∫–∏:", reply_markup=get_deal_type_keyboard())
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            pass
        elif "there is no text in the message to edit" in str(e):
            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–¥–µ–ª–∫–∏:", reply_markup=get_deal_type_keyboard())
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–¥–µ–ª–∫–∏:", reply_markup=get_deal_type_keyboard())
    await state.set_state(RequestStates.deal_type)
    await callback.answer()

@router.callback_query(RequestStates.deal_type)
async def process_deal_type(callback: types.CallbackQuery, state: FSMContext):
    logging.info(f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø —Å–¥–µ–ª–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {callback.data}")
    await state.update_data(deal_type=callback.data)
    try:
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:", reply_markup=get_district_keyboard())
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            pass
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:", reply_markup=get_district_keyboard())
    await state.set_state(RequestStates.district)
    await callback.answer()

@router.callback_query(RequestStates.district)
async def process_district(callback: types.CallbackQuery, state: FSMContext):
    logging.info(f"–í—ã–±—Ä–∞–Ω —Ä–∞–π–æ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {callback.data}")
    await state.update_data(district=callback.data)
    try:
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç:", reply_markup=get_budget_keyboard())
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            pass
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç:", reply_markup=get_budget_keyboard())
    await state.set_state(RequestStates.budget)
    await callback.answer()

@router.callback_query(RequestStates.budget)
async def process_budget(callback: types.CallbackQuery, state: FSMContext):
    logging.info(f"–í—ã–±—Ä–∞–Ω –±—é–¥–∂–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {callback.data}")
    await state.update_data(budget=callback.data)
    try:
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:", reply_markup=get_rooms_keyboard())
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            pass
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:", reply_markup=get_rooms_keyboard())
    await state.set_state(RequestStates.rooms)
    await callback.answer()

@router.callback_query(RequestStates.rooms)
async def process_rooms(callback: CallbackQuery, state: FSMContext):
    logging.info(f"–í—ã–±—Ä–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {callback.data}")
    rooms = callback.data.split('_')[1] if callback.data.startswith('rooms_') else None
    await state.update_data(rooms=rooms)
    data = await state.get_data()
    required_fields = ['name', 'phone', 'property_type', 'deal_type', 'district', 'budget']
    missing_fields = [field for field in required_fields if field not in data]
    if missing_fields:
        logging.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=get_main_menu())
        await state.clear()
        await callback.answer()
        return

    try:
        listings = get_listings()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets: {e}")
        listings = []

    filtered_listings = [
        l for l in listings
        if l.get('property_type') == data['property_type'].replace("property_type_", "") and
           l.get('deal_type') == data['deal_type'].replace("deal_type_", "") and
           l.get('district') == data['district'].replace("district_", "") and
           float(l.get('price', 0)) <= float(data['budget'].replace("budget_", "").split('-')[-1]) and
           (data['rooms'] is None or str(l.get('rooms', '')) == str(data['rooms']))
    ]

    await state.update_data(filtered_listings=filtered_listings, current_listing_index=0, current_photo_index=0)

    if filtered_listings:
        listing = filtered_listings[0]
        photo_urls = (
            [url.strip() for url in listing.get('photo_url', '').split(',') if url.strip().startswith('http') and url.strip().endswith(('.jpg', '.jpeg', '.png'))]
            if isinstance(listing.get('photo_url'), str) else
            [url.strip() for url in listing.get('photo_url', []) if url.strip().startswith('http') and url.strip().endswith(('.jpg', '.jpeg', '.png'))]
        )
        message_text = f"–û–±—ä–µ–∫—Ç 1/{len(filtered_listings)}\nID: {listing['id']}\n{listing.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n–¶–µ–Ω–∞: {listing['price']} ‚ÇΩ\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'):"
        keyboard = get_listing_menu(
            listing_exists=True,
            comments_provided=False,
            has_next_listing=len(filtered_listings) > 1,
            listing_index=0,
            photo_index=0,
            total_photos=len(photo_urls),
            total_listings=len(filtered_listings),
            listing_id=listing['id']
        )
        sent_message = await callback.message.answer(message_text, reply_markup=keyboard)
        if photo_urls:
            await callback.message.answer_photo(photo=photo_urls[0])
    else:
        message_text = "–û–±—ä–µ–∫—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É ‚Äî —Ä–∏—ç–ª—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'):"
        keyboard = get_listing_menu(listing_exists=False, comments_provided=False)
        sent_message = await callback.message.answer(message_text, reply_markup=keyboard)

    await state.set_state(RequestStates.listing)
    logging.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {await state.get_state()}")
    await callback.answer()

@router.message(RequestStates.listing)
async def process_listing_comments(message: Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
    current_state = await state.get_state()
    logging.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    comments = message.text.strip() if message.text and message.text.strip() else "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
    await state.update_data(comments=comments)
    data = await state.get_data()
    filtered_listings = data.get('filtered_listings', [])
    listing_exists = bool(filtered_listings)

    logging.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: listing_exists={listing_exists}, comments={comments}, state={current_state}")

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
    request_data = {
        "name": data.get("name", ""),
        "phone": data.get("phone", ""),
        "property_type": data.get("property_type", "").replace("property_type_", ""),
        "deal_type": data.get("deal_type", "").replace("deal_type_", ""),
        "district": data.get("district", "").replace("district_", ""),
        "budget": data.get("budget", "").replace("budget_", ""),
        "rooms": data.get("rooms", ""),
        "comments": comments,
        "user_id": message.from_user.id,
        "username": message.from_user.username or "no_username"
    }
    logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É: {request_data}")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google Sheets
    try:
        save_request(request_data)
        logging.info("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Google Sheets")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –≤ Google Sheets: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu())
        await state.clear()
        return

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    if ADMIN_ID and isinstance(ADMIN_ID, (list, tuple)) and ADMIN_ID:
        admin_message = (
            f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} (@{message.from_user.username or 'no_username'}):\n"
            f"–ò–º—è: {request_data['name']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {request_data['phone']}\n–¢–∏–ø: {request_data['property_type']}\n"
            f"–°–¥–µ–ª–∫–∞: {request_data['deal_type']}\n–†–∞–π–æ–Ω: {request_data['district']}\n–ë—é–¥–∂–µ—Ç: {request_data['budget']}\n"
            f"–ö–æ–º–Ω–∞—Ç—ã: {request_data['rooms']}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {request_data['comments']}"
        )
        try:
            await message.bot.send_message(ADMIN_ID[0], admin_message)
            logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

    if listing_exists:
        current_listing_index = data.get('current_listing_index', 0)
        listing = filtered_listings[current_listing_index]
        photo_urls = (
            [url.strip() for url in listing.get('photo_url', '').split(',') if url.strip().startswith('http') and url.strip().endswith(('.jpg', '.jpeg', '.png'))]
            if isinstance(listing.get('photo_url'), str) else
            [url.strip() for url in listing.get('photo_url', []) if url.strip().startswith('http') and url.strip().endswith(('.jpg', '.jpeg', '.png'))]
        )
        message_text = f"–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n–û–±—ä–µ–∫—Ç {current_listing_index + 1}/{len(filtered_listings)}\nID: {listing['id']}\n{listing.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n–¶–µ–Ω–∞: {listing['price']} ‚ÇΩ"
        keyboard = get_listing_menu(
            listing_exists=True,
            comments_provided=True,
            has_next_listing=current_listing_index < len(filtered_listings) - 1,
            listing_index=current_listing_index,
            photo_index=data.get('current_photo_index', 0),
            total_photos=len(photo_urls),
            total_listings=len(filtered_listings),
            listing_id=listing['id']
        )
        if photo_urls:
            await message.answer_photo(photo=photo_urls[data.get('current_photo_index', 0)], caption=message_text, reply_markup=keyboard)
        else:
            await message.answer(message_text, reply_markup=keyboard)
    else:
        message_text = "–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–±—ä–µ–∫—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –†–∏—ç–ª—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."
        await message.answer(message_text, reply_markup=get_main_menu())

    await state.clear()
    await asyncio.sleep(0.5)
    await message.delete()

@router.callback_query(F.data.startswith("next_photo_"))
async def next_photo(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    filtered_listings = data.get('filtered_listings', [])
    if not filtered_listings:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.")
        return
    
    current_index = data.get('current_listing_index', 0)
    listing = filtered_listings[current_index]
    photo_urls = (
        [url.strip() for url in listing.get('photo_url', '').split(',') if url.strip().startswith('http') and url.strip().endswith(('.jpg', '.jpeg', '.png'))]
        if isinstance(listing.get('photo_url'), str) else
        [url.strip() for url in listing.get('photo_url', []) if url.strip().startswith('http') and url.strip().endswith(('.jpg', '.jpeg', '.png'))]
    )
    
    callback_parts = callback.data.split('_')
    if len(callback_parts) != 4:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
        return
    new_listing_index = int(callback_parts[2])
    new_photo_index = int(callback_parts[3])
    
    if new_photo_index >= len(photo_urls):
        await callback.answer("–ë–æ–ª—å—à–µ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")
        return
    
    await state.update_data(current_listing_index=new_listing_index, current_photo_index=new_photo_index)
    
    await callback.message.delete()
    await callback.message.answer_photo(
        photo=photo_urls[new_photo_index],
        caption=f"–û–±—ä–µ–∫—Ç {new_listing_index + 1}/{len(filtered_listings)}\nID: {listing['id']}\n{listing['description']}\n–¶–µ–Ω–∞: {listing['price']} ‚ÇΩ\n–§–æ—Ç–æ {new_photo_index + 1}/{len(photo_urls)}",
        reply_markup=get_listing_menu(
            listing_exists=True,
            comments_provided=bool(data.get('comments')),
            has_next_listing=new_listing_index < len(filtered_listings) - 1,
            listing_index=new_listing_index,
            photo_index=new_photo_index,
            total_photos=len(photo_urls),
            total_listings=len(filtered_listings),
            listing_id=listing['id']
        )
    )
    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ {new_photo_index + 1} –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ID {listing['id']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}")
    await callback.answer()

@router.callback_query(F.data.startswith("prev_photo_"))
async def prev_photo(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    filtered_listings = data.get('filtered_listings', [])
    if not filtered_listings:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.")
        return
    
    current_index = data.get('current_listing_index', 0)
    listing = filtered_listings[current_index]
    photo_urls = (
        [url.strip() for url in listing.get('photo_url', '').split(',') if url.strip().startswith('http') and url.strip().endswith(('.jpg', '.jpeg', '.png'))]
        if isinstance(listing.get('photo_url'), str) else
        [url.strip() for url in listing.get('photo_url', []) if url.strip().startswith('http') and url.strip().endswith(('.jpg', '.jpeg', '.png'))]
    )
    
    callback_parts = callback.data.split('_')
    if len(callback_parts) != 4:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
        return
    new_listing_index = int(callback_parts[2])
    new_photo_index = int(callback_parts[3])
    
    if new_photo_index < 0:
        await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ.")
        return
    
    await state.update_data(current_listing_index=new_listing_index, current_photo_index=new_photo_index)
    
    await callback.message.delete()
    await callback.message.answer_photo(
        photo=photo_urls[new_photo_index],
        caption=f"–û–±—ä–µ–∫—Ç {new_listing_index + 1}/{len(filtered_listings)}\nID: {listing['id']}\n{listing['description']}\n–¶–µ–Ω–∞: {listing['price']} ‚ÇΩ\n–§–æ—Ç–æ {new_photo_index + 1}/{len(photo_urls)}",
        reply_markup=get_listing_menu(
            listing_exists=True,
            comments_provided=bool(data.get('comments')),
            has_next_listing=new_listing_index < len(filtered_listings) - 1,
            listing_index=new_listing_index,
            photo_index=new_photo_index,
            total_photos=len(photo_urls),
            total_listings=len(filtered_listings),
            listing_id=listing['id']
        )
    )
    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ {new_photo_index + 1} –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ID {listing['id']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}")
    await callback.answer()

@router.callback_query(F.data.startswith("next_listing_"))
async def next_listing(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    filtered_listings = data.get('filtered_listings', [])
    if not filtered_listings:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.")
        return
    
    callback_parts = callback.data.split('_')
    if len(callback_parts) != 3:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
        return
    new_listing_index = int(callback_parts[2])
    
    if new_listing_index >= len(filtered_listings):
        await callback.answer("–ë–æ–ª—å—à–µ –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤.")
        return
    
    listing = filtered_listings[new_listing_index]
    photo_urls = (
        [url.strip() for url in listing.get('photo_url', '').split(',') if url.strip().startswith('http') and url.strip().endswith(('.jpg', '.jpeg', '.png'))]
        if isinstance(listing.get('photo_url'), str) else
        [url.strip() for url in listing.get('photo_url', []) if url.strip().startswith('http') and url.strip().endswith(('.jpg', '.jpeg', '.png'))]
    )
    await state.update_data(current_listing_index=new_listing_index, current_photo_index=0)
    
    await callback.message.delete()
    message_text = f"–û–±—ä–µ–∫—Ç {new_listing_index + 1}/{len(filtered_listings)}\nID: {listing['id']}\n{listing['description']}\n–¶–µ–Ω–∞: {listing['price']} ‚ÇΩ"
    keyboard = get_listing_menu(
        listing_exists=True,
        comments_provided=bool(data.get('comments')),
        has_next_listing=new_listing_index < len(filtered_listings) - 1,
        listing_index=new_listing_index,
        photo_index=0,
        total_photos=len(photo_urls),
        total_listings=len(filtered_listings),
        listing_id=listing['id']
    )
    await callback.message.answer(message_text, reply_markup=keyboard)
    if photo_urls:
        await callback.message.answer_photo(photo=photo_urls[0])
    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–±—ä–µ–∫—Ç {new_listing_index + 1} (ID: {listing['id']}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}")
    await callback.answer()

@router.callback_query(F.data.startswith("prev_listing_"))
async def prev_listing(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    filtered_listings = data.get('filtered_listings', [])
    if not filtered_listings:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.")
        return
    
    callback_parts = callback.data.split('_')
    if len(callback_parts) != 3:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
        return
    new_listing_index = int(callback_parts[2])
    
    if new_listing_index < 0:
        await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç.")
        return
    
    listing = filtered_listings[new_listing_index]
    photo_urls = (
        [url.strip() for url in listing.get('photo_url', '').split(',') if url.strip().startswith('http') and url.strip().endswith(('.jpg', '.jpeg', '.png'))]
        if isinstance(listing.get('photo_url'), str) else
        [url.strip() for url in listing.get('photo_url', []) if url.strip().startswith('http') and url.strip().endswith(('.jpg', '.jpeg', '.png'))]
    )
    await state.update_data(current_listing_index=new_listing_index, current_photo_index=0)
    
    await callback.message.delete()
    message_text = f"–û–±—ä–µ–∫—Ç {new_listing_index + 1}/{len(filtered_listings)}\nID: {listing['id']}\n{listing['description']}\n–¶–µ–Ω–∞: {listing['price']} ‚ÇΩ"
    keyboard = get_listing_menu(
        listing_exists=True,
        comments_provided=bool(data.get('comments')),
        has_next_listing=new_listing_index < len(filtered_listings) - 1,
        listing_index=new_listing_index,
        photo_index=0,
        total_photos=len(photo_urls),
        total_listings=len(filtered_listings),
        listing_id=listing['id']
    )
    await callback.message.answer(message_text, reply_markup=keyboard)
    if photo_urls:
        await callback.message.answer_photo(photo=photo_urls[0])
    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–±—ä–µ–∫—Ç {new_listing_index + 1} (ID: {listing['id']}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}")
    await callback.answer()

@router.callback_query(F.data.startswith("interested_"))
async def interested(callback: CallbackQuery, state: FSMContext):
    listing_id = callback.data.replace("interested_", "")
    data = await state.get_data()
    filtered_listings = data.get('filtered_listings', [])
    listing = next((l for l in filtered_listings if str(l['id']) == listing_id), None)
    if not listing:
        await callback.answer("–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    await callback.bot.send_message(
        ADMIN_ID[0],
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} (@{callback.from_user.username or 'no_username'}) –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ –æ–±—ä–µ–∫—Ç–µ ID: {listing_id}\n{listing['description']}\n–¶–µ–Ω–∞: {listing['price']} ‚ÇΩ"
    )
    # –ó–∞–ø—Ä–æ—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    current_listing_index = data.get('current_listing_index', 0)
    listing = filtered_listings[current_listing_index]
    photo_urls = (
        [url.strip() for url in listing.get('photo_url', '').split(',') if url.strip().startswith('http') and url.strip().endswith(('.jpg', '.jpeg', '.png'))]
        if isinstance(listing.get('photo_url'), str) else
        [url.strip() for url in listing.get('photo_url', []) if url.strip().startswith('http') and url.strip().endswith(('.jpg', '.jpeg', '.png'))]
    )
    message_text = f"–í–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∫ –æ–±—ä–µ–∫—Ç—É ID: {listing_id} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'):"
    keyboard = get_listing_menu(
        listing_exists=True,
        comments_provided=False,
        has_next_listing=len(filtered_listings) > 1,
        listing_index=current_listing_index,
        photo_index=data.get('current_photo_index', 0),
        total_photos=len(photo_urls),
        total_listings=len(filtered_listings),
        listing_id=listing['id']
    )
    await callback.message.answer(message_text, reply_markup=keyboard)
    if photo_urls:
        await callback.message.answer_photo(photo=photo_urls[data.get('current_photo_index', 0)])
    await callback.answer("–í–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.")
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ –æ–±—ä–µ–∫—Ç–µ ID: {listing_id}")

@router.callback_query(lambda c: c.data == "clear_chat")
async def clear_chat(callback: types.CallbackQuery, state: FSMContext):
    logging.info(f"–û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    try:
        await callback.message.delete()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    await state.clear()
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("return_to_menu"))
async def return_to_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu())
    await callback.answer()