
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å.
–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç –Ω–∞—á–∞–ª–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –¥–æ –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è,
–∏—Å–ø–æ–ª—å–∑—É—è —É–ª—É—á—à–µ–Ω–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from config import ADMIN_ID
import logging
import asyncio
from datetime import datetime
from typing import Optional

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

#from realtor_bot.config import ADMIN_ID
from states.request import RequestStates
from services.sheets import GoogleSheetsService
from services.listings import ListingService
from services.error_handler import handle_error, ErrorHandler
from utils.keyboards import create_main_keyboard, create_cancel_keyboard
from utils.validators import validate_phone, validate_name
from exceptions.custom_exceptions import ValidationError, ServiceError

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞—è–≤–æ–∫
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
sheets_service = GoogleSheetsService()
listing_service = ListingService(sheets_service)
error_handler = ErrorHandler()

logger = logging.getLogger(__name__)


@router.callback_query(F.data.startswith("request_"))
@handle_error(error_handler)
async def handle_request_callback(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏.
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –æ–±—ä–µ–∫—Ç–∞ –∏–∑ callback_data –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—ä–µ–∫—Ç–∞ –∏–∑ callback_data (—Ñ–æ—Ä–º–∞—Ç: "request_123")
    try:
        property_id = int(callback.data.split("_")[1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    property_info = await sheets_service.get_property_by_id(property_id)
    if not property_info:
        await callback.answer("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
    await state.update_data(
        property_id=property_id,
        property_info=property_info
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±—ä–µ–∫—Ç–µ
    property_message = listing_service.format_property_message(property_info)
    
    await callback.message.edit_text(
        f"{property_message}\n\n"
        f"üìã <b>–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä</b>\n\n"
        f"–î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=create_cancel_keyboard(),
        parse_mode='HTML'
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await state.set_state(RequestStates.waiting_for_name)
    await callback.answer()


@router.message(RequestStates.waiting_for_name)
@handle_error(error_handler)
async def process_name(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –∑–∞–ø—Ä–æ—Å—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    """
    name = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã
    if name.lower() in ['/cancel', '–æ—Ç–º–µ–Ω–∞']:
        await cancel_request(message, state)
        return
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è
    try:
        validate_name(name)
    except ValidationError as e:
        await message.reply(
            f"‚ùå {str(e)}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è:",
            reply_markup=create_cancel_keyboard()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(user_name=name)
    
    await message.reply(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ, {name}!\n\n"
        f"üì± –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:\n"
        f"(–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX)",
        reply_markup=create_cancel_keyboard()
    )
    
    await state.set_state(RequestStates.waiting_for_phone)


@router.message(RequestStates.waiting_for_phone)
@handle_error(error_handler)
async def process_phone(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏.
    """
    phone = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã
    if phone.lower() in ['/cancel', '–æ—Ç–º–µ–Ω–∞']:
        await cancel_request(message, state)
        return
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    try:
        normalized_phone = validate_phone(phone)
    except ValidationError as e:
        await message.reply(
            f"‚ùå {str(e)}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=create_cancel_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
    request_data = {
        'timestamp': datetime.now().strftime('%d.%m.%Y %H:%M'),
        'user_id': message.from_user.id,
        'username': message.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω',
        'user_name': data['user_name'],
        'phone': normalized_phone,
        'property_id': data['property_id'],
        'property_address': data['property_info'].get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')
    }
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ Google Sheets
        await sheets_service.save_request(request_data)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏
        success_message = (
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–∞!</b>\n\n"
            f"üìã <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n"
            f"üë§ –ò–º—è: {data['user_name']}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {normalized_phone}\n"
            f"üè† –û–±—ä–µ–∫—Ç: {data['property_info'].get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
            f"‚è∞ –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–∏–º –æ–±—ä–µ–∫—Ç–∞–º!"
        )
        
        await message.reply(
            success_message,
            reply_markup=create_main_keyboard(),
            parse_mode='HTML'
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await notify_admin_about_request(message, request_data, data['property_info'])
        
        logger.info(f"–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
    except ServiceError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        await message.reply(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            reply_markup=create_main_keyboard()
        )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    await state.clear()


async def notify_admin_about_request(message: Message, request_data: dict, property_info: dict):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ.
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
    """
    if not ADMIN_ID:
        return
    
    try:
        admin_message = (
            f"üî• <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä!</b>\n\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b>\n"
            f"‚Ä¢ ID: {request_data['user_id']}\n"
            f"‚Ä¢ Username: @{request_data['username']}\n"
            f"‚Ä¢ –ò–º—è: {request_data['user_name']}\n"
            f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {request_data['phone']}\n\n"
            f"üè† <b>–û–±—ä–µ–∫—Ç:</b>\n"
            f"‚Ä¢ ID: {request_data['property_id']}\n"
            f"‚Ä¢ –ê–¥—Ä–µ—Å: {request_data['property_address']}\n"
            f"‚Ä¢ –¶–µ–Ω–∞: {property_info.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
            f"‚è∞ –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏: {request_data['timestamp']}"
        )
        
        await message.bot.send_message(
            ADMIN_ID,
            admin_message,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")


@router.callback_query(F.data == "cancel_request")
@handle_error(error_handler)
async def cancel_request_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ callback –∫–Ω–æ–ø–∫—É"""
    await cancel_request(callback.message, state, is_callback=True)
    await callback.answer()


async def cancel_request(message: Message, state: FSMContext, is_callback: bool = False):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏.
    –ú–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ –∫–∞–∫ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–∞–∫ –∏ –∏–∑ callback.
    """
    await state.clear()
    
    cancel_message = (
        f"‚ùå –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –æ–±—ä–µ–∫—Ç."
    )
    
    if is_callback:
        await message.edit_text(
            cancel_message,
            reply_markup=create_main_keyboard()
        )
    else:
        await message.reply(
            cancel_message,
            reply_markup=create_main_keyboard()
        )


@router.message(F.text.lower().in_(['–æ—Ç–º–µ–Ω–∞', '/cancel']))
@handle_error(error_handler)
async def handle_cancel_command(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –æ—Ç–º–µ–Ω—ã –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.
    """
    current_state = await state.get_state()
    
    if current_state and current_state.startswith('RequestStates'):
        await cancel_request(message, state)
    else:
        await message.reply(
            "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            reply_markup=create_main_keyboard()
        )