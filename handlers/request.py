from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from services.sheets import save_request
from config import ADMIN_ID
from keyboards.search_filters import get_property_type_keyboard, get_deal_type_keyboard, get_district_keyboard, get_budget_keyboard, get_start_reply_keyboard
import logging

logging.basicConfig(level=logging.DEBUG)

router = Router()

def get_menu_and_clear_buttons():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_menu")],
        [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", callback_data="clear_chat")]
    ])

class RequestStates(StatesGroup):
    name = State()
    phone = State()
    property_type = State()
    deal_type = State()
    district = State()
    budget = State()
    comments = State()

@router.message(F.text == "üì§ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def start_request(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(RequestStates.name)

@router.message(RequestStates.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ Telegram):", 
                        reply_markup=types.ReplyKeyboardMarkup(
                            keyboard=[[types.KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]],
                            resize_keyboard=True,
                            one_time_keyboard=True
                        ))
    await state.set_state(RequestStates.phone)

@router.message(RequestStates.phone, F.contact | F.text)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.contact.phone_number if message.contact else message.text.strip()
    if not phone:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from services.sheets import save_request
from config import ADMIN_ID
from keyboards.search_filters import get_property_type_keyboard, get_deal_type_keyboard, get_district_keyboard, get_budget_keyboard, get_start_reply_keyboard
import logging

logging.basicConfig(level=logging.DEBUG)

router = Router()

def get_menu_and_clear_buttons():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_menu")],
        [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", callback_data="clear_chat")]
    ])

class RequestStates(StatesGroup):
    name = State()
    phone = State()
    property_type = State()
    deal_type = State()
    district = State()
    budget = State()
    comments = State()

@router.message(F.text == "üì§ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def start_request(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=get_menu_and_clear_buttons())
    await state.set_state(RequestStates.name)

@router.message(RequestStates.name)
async def process_name(message: types.Message, state: FSMContext):
    if not message.text or not message.text.strip():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è.", reply_markup=get_menu_and_clear_buttons())
        return
    await state.update_data(name=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ Telegram):",
                        reply_markup=types.ReplyKeyboardMarkup(
                            keyboard=[[types.KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]],
                            resize_keyboard=True,
                            one_time_keyboard=True
                        ))
    await state.set_state(RequestStates.phone)

@router.message(RequestStates.phone, F.contact | F.text)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.contact.phone_number if message.contact else message.text.strip()
    if not phone or not any(c.isdigit() for c in phone):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", reply_markup=get_menu_and_clear_buttons())
        return
    await state.update_data(phone=phone)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:", reply_markup=get_property_type_keyboard())
    await state.set_state(RequestStates.property_type)

@router.callback_query(RequestStates.property_type)
async def process_property_type(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(property_type=callback.data)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–¥–µ–ª–∫–∏:", reply_markup=get_deal_type_keyboard())
    await state.set_state(RequestStates.deal_type)
    await callback.answer()

@router.callback_query(RequestStates.deal_type)
async def process_deal_type(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(deal_type=callback.data)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:", reply_markup=get_district_keyboard())
    await state.set_state(RequestStates.district)
    await callback.answer()

@router.callback_query(RequestStates.district)
async def process_district(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(district=callback.data)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç:", reply_markup=get_budget_keyboard())
    await state.set_state(RequestStates.budget)
    await callback.answer()

@router.callback_query(RequestStates.budget)
async def process_budget(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(budget=callback.data)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –Ω–∞–∂–∞–≤ Enter):", reply_markup=get_menu_and_clear_buttons())
    await state.set_state(RequestStates.comments)
    await callback.answer()

@router.message(RequestStates.comments)
async def process_comments(message: types.Message, state: FSMContext):
    comments = message.text.strip() if message.text and message.text.strip() else "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
    await state.update_data(comments=comments)
    data = await state.get_data()
    
    try:
        save_request(data)
        text = (f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
                f"üë§ –ò–º—è: {data['name']}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
                f"üè† –¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: {data['property_type']}\n"
                f"ü§ù –°–¥–µ–ª–∫–∞: {data['deal_type']}\n"
                f"üìç –†–∞–π–æ–Ω: {data['district']}\n"
                f"üí∞ –ë—é–¥–∂–µ—Ç: {data['budget']}\n"
                f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {data['comments']}")
        await message.bot.send_message(ADMIN_ID, text)
        await message.answer("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –†–∏—ç–ª—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.",
                            reply_markup=get_start_reply_keyboard() if get_start_reply_keyboard else get_menu_and_clear_buttons())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                            reply_markup=get_menu_and_clear_buttons())
    await state.clear()

@router.callback_query(lambda c: c.data == "return_to_menu")
async def return_to_menu(callback: types.CallbackQuery):
    try:
        keyboard = get_start_reply_keyboard() if get_start_reply_keyboard else get_menu_and_clear_buttons()
        await callback.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é.", reply_markup=get_menu_and_clear_buttons())
    await callback.answer()

@router.callback_query(lambda c: c.data == "clear_chat")
async def clear_chat(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    await callback.answer("–ß–∞—Ç –æ—á–∏—â–µ–Ω.")