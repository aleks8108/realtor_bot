from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import ADMIN_ID
from services.sheets import save_appointment
from keyboards.search_filters import get_start_reply_keyboard
import logging

logging.basicConfig(level=logging.DEBUG)

router = Router()

def get_menu_and_clear_buttons():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_menu")],
        [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", callback_data="clear_chat")]
    ])

class AppointmentStates(StatesGroup):
    date = State()
    time = State()
    address = State()

@router.message(F.text == "üìÜ –ù–∞–∑–Ω–∞—á–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É")
async def start_appointment(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—Å—Ç—Ä–µ—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-07-28):", reply_markup=get_menu_and_clear_buttons())
    await state.set_state(AppointmentStates.date)

@router.message(AppointmentStates.date)
async def process_date(message: types.Message, state: FSMContext):
    date = message.text.strip()
    if not validate_date(date):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-07-28).", reply_markup=get_menu_and_clear_buttons())
        return
    await state.update_data(date=date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:00):", reply_markup=get_menu_and_clear_buttons())
    await state.set_state(AppointmentStates.time)

@router.message(AppointmentStates.time)
async def process_time(message: types.Message, state: FSMContext):
    time = message.text.strip()
    if not validate_time(time):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:00).", reply_markup=get_menu_and_clear_buttons())
        return
    await state.update_data(time=time)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏:", reply_markup=get_menu_and_clear_buttons())
    await state.set_state(AppointmentStates.address)

@router.message(AppointmentStates.address)
async def process_address(message: types.Message, state: FSMContext):
    address = message.text.strip() if message.text and message.text.strip() else "–ù–µ —É–∫–∞–∑–∞–Ω"
    await state.update_data(address=address)
    data = await state.get_data()

    try:
        save_appointment(data, message.from_user.full_name, message.from_user.id)
        text = (f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É:\n"
                f"üìÖ –î–∞—Ç–∞: {data['date']}\n"
                f"üïí –í—Ä–µ–º—è: {data['time']}\n"
                f"üìç –ê–¥—Ä–µ—Å/–æ–±—ä–µ–∫—Ç: {data['address']}\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {message.from_user.full_name} (@{message.from_user.username or 'no_username'})\n"
                f"üÜî ID: {message.from_user.id}")
        await message.bot.send_message(ADMIN_ID, text)
        await message.answer("–í—Å—Ç—Ä–µ—á–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞! –†–∏—ç–ª—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.",
                            reply_markup=get_start_reply_keyboard() if get_start_reply_keyboard else get_menu_and_clear_buttons())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                            reply_markup=get_menu_and_clear_buttons())
    await state.clear()

def validate_date(date: str) -> bool:
    try:
        from datetime import datetime
        datetime.strptime(date, "%Y-%m-%d")
        return True
    except ValueError:
        return False

def validate_time(time: str) -> bool:
    try:
        from datetime import datetime
        datetime.strptime(time, "%H:%M")
        return True
    except ValueError:
        return False

@router.callback_query(lambda c: c.data == "return_to_menu")
async def return_to_menu(callback: types.CallbackQuery):
    try:
        keyboard = get_start_reply_keyboard() if get_start_reply_keyboard else get_menu_and_clear_buttons()
        await callback.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é.", reply_markup=get_menu_and_clear_buttons())
    await callback.answer()

@router.callback_query(lambda c: c.data == "clear_chat")
async def clear_chat(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    await callback.answer("–ß–∞—Ç –æ—á–∏—â–µ–Ω.")