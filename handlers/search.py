from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from services.sheets import init_sheets
from config import ADMIN_ID
from keyboards.search_filters import get_property_type_keyboard, get_deal_type_keyboard, get_district_keyboard, get_budget_keyboard, get_start_reply_keyboard
import logging
import gspread
import asyncio
import time
import aiogram.exceptions

router = Router()

class SearchStates(StatesGroup):
    property_type = State()
    deal_type = State()
    district = State()
    budget = State()
    rooms = State()

# –ö—ç—à –¥–∞–Ω–Ω—ã—Ö Google Sheets
_listings_cache = None
_cache_timestamp = 0
_CACHE_TTL = 300  # 5 –º–∏–Ω—É—Ç

async def get_listings():
    global _listings_cache, _cache_timestamp
    if _listings_cache is None or time.time() - _cache_timestamp > _CACHE_TTL:
        try:
            sheet = init_sheets()
            _listings_cache = sheet.get_all_records()
            _cache_timestamp = time.time()
            logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –∫—ç—à –∑–∞–ø–∏—Å–µ–π: {len(_listings_cache)}")
        except gspread.exceptions.APIError as e:
            logging.error(f"–û—à–∏–±–∫–∞ API Google Sheets: {e}")
            _listings_cache = []
    return _listings_cache

@router.message(F.text == "üè† –ù–∞–π—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å")
async def start_search(message: types.Message, state: FSMContext):
    logging.info(f"–ö–Ω–æ–ø–∫–∞ '–ù–∞–π—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å' –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}, message_id={message.message_id}")
    await state.update_data(search_message_ids=[message.message_id])
    response = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:", reply_markup=get_property_type_keyboard())
    data = await state.get_data()
    search_message_ids = data.get("search_message_ids", [])
    if response.message_id not in search_message_ids:
        search_message_ids.append(response.message_id)
        logging.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id={response.message_id} –≤ start_search")
    await state.update_data(search_message_ids=search_message_ids)
    await state.set_state(SearchStates.property_type)

@router.callback_query(SearchStates.property_type)
async def process_property_type(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    search_message_ids = data.get("search_message_ids", [])
    if callback.message.message_id not in search_message_ids:
        search_message_ids.append(callback.message.message_id)
        logging.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id={callback.message.message_id} –≤ process_property_type")
    await state.update_data(search_message_ids=search_message_ids)
    await state.update_data(property_type=callback.data)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–¥–µ–ª–∫–∏:", reply_markup=get_deal_type_keyboard())
    await state.set_state(SearchStates.deal_type)
    await callback.answer()

@router.callback_query(SearchStates.deal_type)
async def process_deal_type(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    search_message_ids = data.get("search_message_ids", [])
    if callback.message.message_id not in search_message_ids:
        search_message_ids.append(callback.message.message_id)
        logging.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id={callback.message.message_id} –≤ process_deal_type")
    await state.update_data(search_message_ids=search_message_ids)
    await state.update_data(deal_type=callback.data)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:", reply_markup=get_district_keyboard())
    await state.set_state(SearchStates.district)
    await callback.answer()

@router.callback_query(SearchStates.district)
async def process_district(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    search_message_ids = data.get("search_message_ids", [])
    if callback.message.message_id not in search_message_ids:
        search_message_ids.append(callback.message.message_id)
        logging.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id={callback.message.message_id} –≤ process_district")
    await state.update_data(search_message_ids=search_message_ids)
    await state.update_data(district=callback.data)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç:", reply_markup=get_budget_keyboard())
    await state.set_state(SearchStates.budget)
    await callback.answer()

@router.callback_query(SearchStates.budget)
async def process_budget(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    search_message_ids = data.get("search_message_ids", [])
    if callback.message.message_id not in search_message_ids:
        search_message_ids.append(callback.message.message_id)
        logging.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id={callback.message.message_id} –≤ process_budget")
    await state.update_data(search_message_ids=search_message_ids)
    budget = callback.data
    await state.update_data(budget=budget)
    data = await state.get_data()
    if data["property_type"] in ["–ö–≤–∞—Ä—Ç–∏—Ä–∞", "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è"]:
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –Ω–∞–∂–∞–≤ Enter –¥–ª—è '–õ—é–±–æ–µ':")
        await state.set_state(SearchStates.rooms)
    else:
        await perform_search(callback.message, state)
    await callback.answer()

@router.message(SearchStates.rooms)
async def process_rooms(message: types.Message, state: FSMContext):
    data = await state.get_data()
    search_message_ids = data.get("search_message_ids", [])
    if message.message_id not in search_message_ids:
        search_message_ids.append(message.message_id)
        logging.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id={message.message_id} –≤ process_rooms")
    await state.update_data(search_message_ids=search_message_ids)
    rooms = message.text.strip() or "–õ—é–±–æ–µ"
    if rooms != "–õ—é–±–æ–µ" and not rooms.isdigit():
        response = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∫–æ–º–Ω–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ (Enter).")
        if response.message_id not in search_message_ids:
            search_message_ids.append(response.message_id)
            logging.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id={response.message_id} –≤ process_rooms (–æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞)")
        await state.update_data(search_message_ids=search_message_ids)
        return
    await state.update_data(rooms=rooms)
    await perform_search(message, state)

async def perform_search(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        logging.info(f"–ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: {data}")
        listings = await get_listings()
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞: {len(listings)}")
        
        filtered_listings = []
        for listing in listings:
            if not is_valid_listing(listing, data):
                continue
            filtered_listings.append(listing)
        filtered_listings = filtered_listings[:5]
        
        if not filtered_listings:
            response = await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.")
            search_message_ids = data.get("search_message_ids", [])
            if response.message_id not in search_message_ids:
                search_message_ids.append(response.message_id)
                logging.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id={response.message_id} –¥–ª—è '–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'")
            await state.update_data(search_message_ids=list(set(search_message_ids)))
            logging.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            await state.clear()
            return

        search_message_ids = data.get("search_message_ids", [])
        for listing in filtered_listings:
            text = (f"üè† ID: {listing['id']} | {listing['property_type']} ({listing['deal_type']})\n"
                    f"üìç {listing['district']}\n"
                    f"üí∞ {listing['price']} —Ä—É–±.\n"
                    f"üõã –ö–æ–º–Ω–∞—Ç: {listing.get('rooms', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                    f"üìù {listing.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç", callback_data=f"interested_{listing['id']}")]
            ])

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            photo_urls = listing.get("photo_urls") or ""
            if isinstance(photo_urls, str):
                photo_urls = photo_urls.strip()
            else:
                photo_urls = ""
            try:
                if photo_urls:
                    urls = [url.strip() for url in photo_urls.split(",") if url.strip()]
                    if urls:
                        # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã (–ø–æ 10 —Ñ–æ—Ç–æ)
                        for i in range(0, len(urls), 10):
                            chunk = urls[i:i+10]
                            media = [
                                InputMediaPhoto(media=url, caption=text if i == 0 and j == 0 else None)
                                for j, url in enumerate(chunk)
                            ]
                            media_message = await message.answer_media_group(media=media)
                            for msg in media_message:
                                if msg.message_id not in search_message_ids:
                                    search_message_ids.append(msg.message_id)
                            logging.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ {listing['id']} —Å {len(chunk)} —Ñ–æ—Ç–æ, message_ids={[m.message_id for m in media_message]}")
                        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π
                        text_message = await message.answer(text, reply_markup=markup)
                        if text_message.message_id not in search_message_ids:
                            search_message_ids.append(text_message.message_id)
                        logging.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∑–∞–ø–∏—Å–∏ {listing['id']}, message_id={text_message.message_id}")
                    else:
                        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                        photo_message = await message.answer_photo(
                            photo=urls[0],
                            caption=text,
                            reply_markup=markup
                        )
                        if photo_message.message_id not in search_message_ids:
                            search_message_ids.append(photo_message.message_id)
                        logging.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–¥–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∑–∞–ø–∏—Å–∏ {listing['id']}, message_id={photo_message.message_id}")
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                    text_message = await message.answer(text, reply_markup=markup)
                    if text_message.message_id not in search_message_ids:
                        search_message_ids.append(text_message.message_id)
                    logging.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∑–∞–ø–∏—Å–∏ {listing['id']} –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, message_id={text_message.message_id}")
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ {listing['id']}: {e}")
                text_message = await message.answer(text, reply_markup=markup)
                if text_message.message_id not in search_message_ids:
                    search_message_ids.append(text_message.message_id)
                logging.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∑–∞–ø–∏—Å–∏ {listing['id']} –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏, message_id={text_message.message_id}")
        
        await state.update_data(search_message_ids=list(set(search_message_ids)))
        logging.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã message_ids: {search_message_ids}")
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(filtered_listings)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞")
        await state.clear()
    except gspread.exceptions.GSpreadException as e:
        response = await message.answer(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã: {str(e)}. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        search_message_ids = data.get("search_message_ids", [])
        if response.message_id not in search_message_ids:
            search_message_ids.append(response.message_id)
            logging.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id={response.message_id} –¥–ª—è –æ—à–∏–±–∫–∏ GSpread")
        await state.update_data(search_message_ids=list(set(search_message_ids)))
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        await state.clear()
    except Exception as e:
        response = await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")
        search_message_ids = data.get("search_message_ids", [])
        if response.message_id not in search_message_ids:
            search_message_ids.append(response.message_id)
            logging.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id={response.message_id} –¥–ª—è –æ–±—â–µ–π –æ—à–∏–±–∫–∏")
        await state.update_data(search_message_ids=list(set(search_message_ids)))
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        await state.clear()

def is_valid_listing(listing: dict, data: dict) -> bool:
    try:
        listing_property_type = str(listing.get("property_type", "")).strip()
        if listing_property_type != data["property_type"]:
            logging.debug(f"–ó–∞–ø–∏—Å—å {listing.get('id')} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: property_type={listing_property_type} != {data['property_type']}")
            return False

        listing_deal_type = str(listing.get("deal_type", "")).strip()
        if listing_deal_type != data["deal_type"]:
            logging.debug(f"–ó–∞–ø–∏—Å—å {listing.get('id')} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: deal_type={listing_deal_type} != {data['deal_type']}")
            return False

        listing_district = str(listing.get("district", "")).strip()
        if listing_district != data["district"]:
            logging.debug(f"–ó–∞–ø–∏—Å—å {listing.get('id')} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: district={listing_district} != {data['district']}")
            return False

        price = listing.get("price", 0)
        if isinstance(price, str):
            if not price.strip().isdigit():
                logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ –≤ –∑–∞–ø–∏—Å–∏ {listing.get('id')}: {price}")
                return False
            price = int(price.strip())
        elif not isinstance(price, int):
            logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Ü–µ–Ω—ã –≤ –∑–∞–ø–∏—Å–∏ {listing.get('id')}: {type(price)}")
            return False
        if not is_in_budget(price, data["budget"]):
            logging.debug(f"–ó–∞–ø–∏—Å—å {listing.get('id')} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: price={price} –Ω–µ –≤ –±—é–¥–∂–µ—Ç–µ {data['budget']}")
            return False

        rooms = data.get("rooms", "–õ—é–±–æ–µ")
        listing_rooms = str(listing.get("rooms", "")).strip()
        if rooms != "–õ—é–±–æ–µ" and listing_rooms and listing_rooms != rooms:
            logging.debug(f"–ó–∞–ø–∏—Å—å {listing.get('id')} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: rooms={listing_rooms} != {rooms}")
            return False
        if rooms != "–õ—é–±–æ–µ" and not listing_rooms:
            logging.debug(f"–ó–∞–ø–∏—Å—å {listing.get('id')} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: rooms –ø—É—Å—Ç–æ–µ, —Ç—Ä–µ–±—É–µ—Ç—Å—è {rooms}")
            return False

        logging.debug(f"–ó–∞–ø–∏—Å—å {listing.get('id')} –ø—Ä–æ—à–ª–∞ —Ñ–∏–ª—å—Ç—Ä—ã")
        return True
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ {listing.get('id')}: {e}")
        return False

def is_in_budget(price: int, budget: str) -> bool:
    try:
        if not isinstance(budget, str) or "-" not in budget:
            logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±—é–¥–∂–µ—Ç–∞: {budget}")
            return False
        min_budget, max_budget = map(int, budget.split("-"))
        result = min_budget <= price <= max_budget
        logging.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –±—é–¥–∂–µ—Ç–∞: price={price}, budget={min_budget}-{max_budget}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç={result}")
        return result
    except ValueError as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±—é–¥–∂–µ—Ç–∞: price={price}, budget={budget}, –æ—à–∏–±–∫–∞={e}")
        return False

@router.callback_query(F.data.startswith("interested_"))
async def process_interested(callback: types.CallbackQuery, state: FSMContext):
    try:
        listing_id = callback.data.split("_")[1]
        logging.debug(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç' –¥–ª—è –∑–∞–ø–∏—Å–∏ {listing_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
        listings = await get_listings()
        listing = next((l for l in listings if str(l.get("id", "")) == listing_id), None)
        
        if listing:
            text = (f"–ö–ª–∏–µ–Ω—Ç –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ –æ–±—ä–µ–∫—Ç–µ:\n"
                    f"üè† ID: {listing['id']} | {listing['property_type']} ({listing['deal_type']})\n"
                    f"üìç {listing['district']}\n"
                    f"üí∞ {listing['price']} —Ä—É–±.\n"
                    f"üë§ –ö–ª–∏–µ–Ω—Ç: {callback.from_user.full_name} (@{callback.from_user.username or '–Ω–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'})\n"
                    f"üÜî ID: {callback.from_user.id}")
            await callback.message.bot.send_message(ADMIN_ID, text)
            response = await callback.message.answer(
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å! –†–∏—ç–ª—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.",
                reply_markup=get_start_reply_keyboard()
            )
            data = await state.get_data()
            search_message_ids = data.get("search_message_ids", [])
            if callback.message.message_id not in search_message_ids:
                search_message_ids.append(callback.message.message_id)
                logging.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id={callback.message.message_id} –≤ process_interested (callback)")
            if response.message_id not in search_message_ids:
                search_message_ids.append(response.message_id)
                logging.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id={response.message_id} –≤ process_interested (–æ—Ç–≤–µ—Ç)")
            await state.update_data(search_message_ids=list(set(search_message_ids)))
            logging.info(f"–ö–ª–∏–µ–Ω—Ç {callback.from_user.id} –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ –æ–±—ä–µ–∫—Ç–µ {listing_id}")
        else:
            response = await callback.message.answer(
                "–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_start_reply_keyboard()
            )
            data = await state.get_data()
            search_message_ids = data.get("search_message_ids", [])
            if response.message_id not in search_message_ids:
                search_message_ids.append(response.message_id)
                logging.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id={response.message_id} –≤ process_interested (–æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω)")
            await state.update_data(search_message_ids=list(set(search_message_ids)))
            logging.warning(f"–û–±—ä–µ–∫—Ç {listing_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ")
    except gspread.exceptions.GSpreadException as e:
        response = await callback.message.answer(
            f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã: {str(e)}. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_start_reply_keyboard()
        )
        data = await state.get_data()
        search_message_ids = data.get("search_message_ids", [])
        if response.message_id not in search_message_ids:
            search_message_ids.append(response.message_id)
            logging.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id={response.message_id} –≤ process_interested (–æ—à–∏–±–∫–∞ GSpread)")
        await state.update_data(search_message_ids=list(set(search_message_ids)))
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã: {e}")
    except Exception as e:
        response = await callback.message.answer(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_start_reply_keyboard()
        )
        data = await state.get_data()
        search_message_ids = data.get("search_message_ids", [])
        if response.message_id not in search_message_ids:
            search_message_ids.append(response.message_id)
            logging.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id={response.message_id} –≤ process_interested (–æ–±—â–∞—è –æ—à–∏–±–∫–∞)")
        await state.update_data(search_message_ids=list(set(search_message_ids)))
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ {listing_id}: {e}")
    await callback.answer()

@router.callback_query(F.data == "return_to_main")
async def process_return_to_main(callback: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        search_message_ids = list(set(data.get("search_message_ids", [])))
        chat_id = callback.message.chat.id
        bot = callback.message.bot
        logging.debug(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {search_message_ids} –≤ —á–∞—Ç–µ {chat_id}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for message_id in search_message_ids:
            try:
                await bot.delete_message(chat_id=chat_id, message_id=message_id)
                logging.debug(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id}")
            except aiogram.exceptions.TelegramBadRequest as e:
                logging.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
        current_message_id = callback.message.message_id
        for i in range(max(1, current_message_id - 100), current_message_id + 1):
            try:
                await bot.delete_message(chat_id=chat_id, message_id=i)
                logging.debug(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {i} –≤ —á–∞—Ç–µ {chat_id} (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞)")
            except aiogram.exceptions.TelegramBadRequest as e:
                logging.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {i} –≤ —á–∞—Ç–µ {chat_id}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        response = await callback.message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ YouMaklerBot! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∏—ç–ª—Ç–æ—Ä–æ–º.",
            reply_markup=get_start_reply_keyboard()
        )
        await state.clear()
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, message_id={response.message_id}")
    except Exception as e:
        response = await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é: {e}")
    await callback.answer()