"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.
–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º –ø–æ–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤, –∏—Ö –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É –Ω–∏–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä–µ–∫—Ç–∞–º–∏.
"""

import logging
from typing import Optional, Dict, Any

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from states.search import SearchStates
from services.sheets import GoogleSheetsService
from services.listings import ListingService
from services.error_handler import handle_errors, ErrorHandler
from utils.keyboards import (
    create_main_keyboard, 
    create_property_keyboard, 
    create_navigation_keyboard
)
from exceptions.custom_exceptions import ServiceError

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–∏—Å–∫–∞
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
sheets_service = GoogleSheetsService()
listing_service = ListingService(sheets_service)
error_handler = ErrorHandler()

logger = logging.getLogger(__name__)


@router.message(F.text == "üîç –ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤")
@handle_errors(error_handler)
async def start_search(message: Message, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–π –∏–∑ –Ω–∏—Ö.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        properties = await sheets_service.get_all_properties()
        
        if not properties:
            await message.reply(
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏.",
                reply_markup=create_main_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            properties=properties,
            current_index=0
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç
        await show_property_at_index(message, state, 0, is_new_search=True)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        await state.set_state(SearchStates.viewing_properties)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫. –ù–∞–π–¥–µ–Ω–æ {len(properties)} –æ–±—ä–µ–∫—Ç–æ–≤")
        
    except ServiceError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä–µ–∫—Ç–æ–≤: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä–µ–∫—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_main_keyboard()
        )


async def show_property_at_index(
    message: Message, 
    state: FSMContext, 
    index: int, 
    is_new_search: bool = False,
    edit_message: bool = False
):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É.
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑—É–µ—Ç –ª–æ–≥–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
    –∫–∞–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–∏—Å–∫–æ–≤, —Ç–∞–∫ –∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏.
    """
    data = await state.get_data()
    properties = data.get('properties', [])
    
    if not properties or index < 0 or index >= len(properties):
        await message.reply(
            "‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=create_main_keyboard()
        )
        return
    
    current_property = properties[index]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_index=index)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—ä–µ–∫—Ç–µ
    property_message = listing_service.format_property_message(
        current_property,
        index + 1,  # –ù–æ–º–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1)
        len(properties)  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    keyboard = create_property_keyboard(
        property_id=current_property.get('id'),
        current_index=index,
        total_count=len(properties)
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if edit_message:
        await message.edit_text(
            property_message,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    else:
        # –î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if is_new_search:
            intro_message = (
                f"üè† –ù–∞–π–¥–µ–Ω–æ <b>{len(properties)}</b> –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏:"
            )
            await message.reply(intro_message, parse_mode='HTML')
        
        await message.reply(
            property_message,
            reply_markup=keyboard,
            parse_mode='HTML'
        )


@router.callback_query(F.data.startswith("nav_"))
@handle_errors(error_handler)
async def handle_navigation(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É, –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É, –ø–µ—Ä–≤–æ–º—É –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –æ–±—ä–µ–∫—Ç—É.
    """
    action = callback.data.split("_")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ callback_data
    
    data = await state.get_data()
    properties = data.get('properties', [])
    current_index = data.get('current_index', 0)
    
    if not properties:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤", show_alert=True)
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
    if action == "next":
        new_index = min(current_index + 1, len(properties) - 1)
    elif action == "prev":
        new_index = max(current_index - 1, 0)
    elif action == "first":
        new_index = 0
    elif action == "last":
        new_index = len(properties) - 1
    else:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã —É–∂–µ –Ω–∞ –Ω—É–∂–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ
    if new_index == current_index:
        # –î–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç—å, —á—Ç–æ –æ–Ω –¥–æ—Å—Ç–∏–≥ –≥—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞
        if action in ["next", "last"] and current_index == len(properties) - 1:
            await callback.answer("üìç –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—ä–µ–∫—Ç –≤ —Å–ø–∏—Å–∫–µ")
        elif action in ["prev", "first"] and current_index == 0:
            await callback.answer("üìç –≠—Ç–æ –ø–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç –≤ —Å–ø–∏—Å–∫–µ")
        else:
            await callback.answer()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –Ω–æ–≤—ã–º –∏–Ω–¥–µ–∫—Å–æ–º
    await show_property_at_index(
        callback.message, 
        state, 
        new_index, 
        edit_message=True
    )
    
    await callback.answer()


@router.callback_query(F.data.startswith("photo_"))
@handle_errors(error_handler)
async def handle_photo_navigation(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–±—ä–µ–∫—Ç–∞.
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—ä–µ–∫—Ç–∞ –∏ –Ω–æ–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ callback_data
        # –§–æ—Ä–º–∞—Ç: "photo_123_1" –≥–¥–µ 123 - ID –æ–±—ä–µ–∫—Ç–∞, 1 - –Ω–æ–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        parts = callback.data.split("_")
        property_id = int(parts[1])
        photo_index = int(parts[2])
        
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", show_alert=True)
        return
    
    data = await state.get_data()
    properties = data.get('properties', [])
    current_index = data.get('current_index', 0)
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç
    current_property = None
    for prop in properties:
        if prop.get('id') == property_id:
            current_property = prop
            break
    
    if not current_property:
        await callback.answer("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–±—ä–µ–∫—Ç–∞
    photos = listing_service.get_property_photos(current_property)
    
    if not photos or photo_index < 0 or photo_index >= len(photos):
        await callback.answer("‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        photo_url = photos[photo_index]
        caption = (
            f"üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è {photo_index + 1} –∏–∑ {len(photos)}\n"
            f"üè† {current_property.get('address', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')}"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º
        photo_keyboard = create_navigation_keyboard(
            property_id=property_id,
            current_photo=photo_index,
            total_photos=len(photos),
            keyboard_type="photo"
        )
        
        await callback.message.answer_photo(
            photo=photo_url,
            caption=caption,
            reply_markup=photo_keyboard
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", show_alert=True)


@router.callback_query(F.data == "back_to_list")
@handle_errors(error_handler)
async def back_to_property_list(callback: CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
    """
    data = await state.get_data()
    current_index = data.get('current_index', 0)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç
    await show_property_at_index(
        callback.message,
        state,
        current_index,
        edit_message=True
    )
    
    await callback.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –æ–±—ä–µ–∫—Ç–æ–≤")


@router.callback_query(F.data == "end_search")
@handle_errors(error_handler)
async def end_search(callback: CallbackQuery, state: FSMContext):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    –û—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    await state.clear()
    
    await callback.message.edit_text(
        "‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–∏–º –æ–±—ä–µ–∫—Ç–∞–º! "
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä, "
        "–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.",
        reply_markup=create_main_keyboard()
    )
    
    await callback.answer()


@router.message(SearchStates.viewing_properties)
@handle_errors(error_handler)
async def handle_text_during_search(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä–µ–∫—Ç–æ–≤.
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ —Ç–æ–º, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
    """
    if message.text and message.text.lower() in ['–≤—ã—Ö–æ–¥', '–∑–∞–≤–µ—Ä—à–∏—Ç—å', '—Å—Ç–æ–ø']:
        await end_search(message, state)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.reply(
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º.\n\n"
        "‚Ä¢ ‚¨ÖÔ∏è‚û°Ô∏è - –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏\n"
        "‚Ä¢ üì∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n"
        "‚Ä¢ üìã - –ø–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä\n"
        "‚Ä¢ ‚ùå - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞\n\n"
        "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞.",
        reply_markup=None
    )