"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.
–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º –ø–æ–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤, –∏—Ö –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É –Ω–∏–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä–µ–∫—Ç–∞–º–∏.
"""

import logging
from typing import Optional, Dict, Any

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from states.search import SearchStates
from services.sheets import GoogleSheetsService
from services.listings import ListingService
from services.error_handler import error_handler
from utils.keyboards import create_main_keyboard, get_listing_menu, create_navigation_keyboard
from exceptions.custom_exceptions import ServiceError
from handlers.admin import log_user_action
from states.request import RequestStates
from utils.keyboards import get_property_type_keyboard, get_contact_keyboard

router = Router()

sheets_service = GoogleSheetsService()
logger = logging.getLogger(__name__)

@router.message(F.text == "üîç –ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤")
@error_handler(operation_name="–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤")
async def start_search(message: Message, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–π –∏–∑ –Ω–∏—Ö.
    """
    try:
        properties = await sheets_service.get_all_properties()
        
        if not properties:
            await message.reply(
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏.",
                reply_markup=create_main_keyboard()
            )
            return
        
        await state.update_data(
            properties=properties,
            current_index=0
        )
        
        await show_property_at_index(message, state, 0, is_new_search=True)
        
        await state.set_state(SearchStates.viewing_listings)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫. –ù–∞–π–¥–µ–Ω–æ {len(properties)} –æ–±—ä–µ–∫—Ç–æ–≤")
        log_user_action(message.from_user.id, message.from_user.username, "–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤")
        
    except ServiceError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä–µ–∫—Ç–æ–≤: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä–µ–∫—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_main_keyboard()
        )

async def show_property_at_index(
    message: Message, 
    state: FSMContext, 
    index: int, 
    is_new_search: bool = False,
    edit_message: bool = False
):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É.
    """
    data = await state.get_data()
    properties = data.get('properties', [])
    
    if not properties or index < 0 or index >= len(properties):
        await message.reply(
            "‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=create_main_keyboard()
        )
        return
    
    current_property = properties[index]
    
    await state.update_data(current_index=index)
    
    property_message = ListingService._format_listing_message(
        current_property,
        index + 1,
        len(properties)
    )
    
    keyboard = get_listing_menu(
        listing_exists=True,
        comments_provided=False,
        has_next_listing=index < len(properties) - 1,
        listing_index=index,
        photo_index=0,
        total_photos=len(ListingService.get_property_photos(current_property)),
        total_listings=len(properties),
        listing_id=str(current_property.get('id'))
    )
    
    if edit_message:
        await message.edit_text(
            property_message,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    else:
        if is_new_search:
            intro_message = (
                f"üè† –ù–∞–π–¥–µ–Ω–æ <b>{len(properties)}</b> –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏:"
            )
            await message.reply(intro_message, parse_mode='HTML')
        
        await message.reply(
            property_message,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    log_user_action(message.from_user.id, message.from_user.username, f"–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä–µ–∫—Ç–∞ #{index + 1}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback_query
@router.callback_query(F.data == "search_property")
@error_handler(operation_name="–ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É")
async def process_search_property(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ 'üîç –ü–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏'.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.
    """
    await state.set_state(SearchStates.awaiting_property_type)
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:",
        reply_markup=get_property_type_keyboard()
    )
    await callback.answer("–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞...")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É")

@router.callback_query(F.data == "create_request")
@error_handler(operation_name="–ó–∞–ø—É—Å–∫ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É")
async def process_create_request(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ 'üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'.
    –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –Ω–∞—á–∞–ª—É –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏.
    """
    await state.set_state(RequestStates.name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await callback.answer("–ù–∞—á–∞–ª–æ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏...")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏")

@router.callback_query(F.data == "contact_realtor")
@error_handler(operation_name="–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É")
async def process_contact_realtor(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∏—ç–ª—Ç–æ—Ä–æ–º'.
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
    """
    contacts_message = (
        f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
        f"üè¢ <b>–ù–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è</b>\n"
        f"–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ '–î–æ–º–°–µ—Ä–≤–∏—Å'\n\n"
        f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω—ã:</b>\n"
        f"‚Ä¢ –û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂: +7 (XXX) XXX-XX-XX\n"
        f"‚Ä¢ –û—Ç–¥–µ–ª –∞—Ä–µ–Ω–¥—ã: +7 (XXX) XXX-XX-XX\n"
        f"‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: +7 905 476 44 48\n\n"
        f"üïê <b>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</b>\n"
        f"–ü–Ω-–ü—Ç: 9:00 - 19:00\n"
        f"–°–±-–í—Å: 10:00 - 17:00\n\n"
        f"üìç <b>–ê–¥—Ä–µ—Å –æ—Ñ–∏—Å–∞:</b>\n"
        f"–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 123\n\n"
        f"üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤ Telegram: <a href='https://t.me/aleks8108'>@aleks8108</a>\n"
        f"üìß –ù–∞–ø–∏—à–∏—Ç–µ email: <a href='mailto:aleks8108@gmail.com'>aleks8108@gmail.com</a>"
    )
    await callback.message.answer(
        contacts_message,
        reply_markup=None,  # –£–±—Ä–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        parse_mode='HTML',
        disable_web_page_preview=True
    )
    await callback.answer("–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–∫–∞–∑–∞–Ω—ã")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç—ã")

@router.callback_query(F.data.startswith("nav_"))
@error_handler(operation_name="–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –æ–±—ä–µ–∫—Ç–∞–º")
async def handle_navigation(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.
    """
    action = callback.data.split("_")[1]
    
    data = await state.get_data()
    properties = data.get('properties', [])
    current_index = data.get('current_index', 0)
    
    if not properties:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤", show_alert=True)
        return
    
    if action == "next":
        new_index = min(current_index + 1, len(properties) - 1)
    elif action == "prev":
        new_index = max(current_index - 1, 0)
    elif action == "first":
        new_index = 0
    elif action == "last":
        new_index = len(properties) - 1
    else:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)
        return
    
    if new_index == current_index:
        if action in ["next", "last"] and current_index == len(properties) - 1:
            await callback.answer("üìç –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—ä–µ–∫—Ç –≤ —Å–ø–∏—Å–∫–µ")
        elif action in ["prev", "first"] and current_index == 0:
            await callback.answer("üìç –≠—Ç–æ –ø–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç –≤ —Å–ø–∏—Å–∫–µ")
        else:
            await callback.answer()
        return
    
    await show_property_at_index(
        callback.message, 
        state, 
        new_index, 
        edit_message=True
    )
    
    await callback.answer()
    log_user_action(callback.from_user.id, callback.from_user.username, f"–ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –æ–±—ä–µ–∫—Ç—É #{new_index + 1}")

@router.callback_query(F.data.startswith("photo_"))
@error_handler(operation_name="–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º")
async def handle_photo_navigation(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞.
    """
    try:
        parts = callback.data.split("_")
        property_id = int(parts[1])
        photo_index = int(parts[2])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", show_alert=True)
        return
    
    data = await state.get_data()
    properties = data.get('properties', [])
    
    current_property = None
    for prop in properties:
        if prop.get('id') == property_id:
            current_property = prop
            break
    
    if not current_property:
        await callback.answer("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    photos = ListingService.get_property_photos(current_property)
    
    if not photos or photo_index < 0 or photo_index >= len(photos):
        await callback.answer("‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    try:
        photo_url = photos[photo_index]
        caption = (
            f"üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è {photo_index + 1} –∏–∑ {len(photos)}\n"
            f"üè† {current_property.get('address', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')}"
        )
        
        nav_config = {
            'current_page': 0,
            'total_pages': 1,
            'has_prev': False,
            'has_next': False,
            'photo_index': photo_index,
            'total_photos': len(photos),
            'callback_prefix': f"photo_{property_id}",
            'keyboard_type': 'photo'
        }
        
        photo_keyboard = create_navigation_keyboard(nav_config)
        
        await callback.message.answer_photo(
            photo=photo_url,
            caption=caption,
            reply_markup=photo_keyboard
        )
        
        await callback.answer()
        log_user_action(callback.from_user.id, callback.from_user.username, f"–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ #{photo_index + 1} –æ–±—ä–µ–∫—Ç–∞ ID: {property_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", show_alert=True)

@router.callback_query(F.data == "back_to_list")
@error_handler(operation_name="–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –æ–±—ä–µ–∫—Ç–æ–≤")
async def back_to_property_list(callback: CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.
    """
    data = await state.get_data()
    current_index = data.get('current_index', 0)
    
    await show_property_at_index(
        callback.message,
        state,
        current_index,
        edit_message=True
    )
    
    await callback.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –æ–±—ä–µ–∫—Ç–æ–≤")
    log_user_action(callback.from_user.id, callback.from_user.username, "–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –æ–±—ä–µ–∫—Ç–æ–≤")

@router.callback_query(F.data == "end_search")
@error_handler(operation_name="–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞")
async def end_search(callback: CallbackQuery, state: FSMContext):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    await state.clear()
    
    await callback.message.edit_text(
        "‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–∏–º –æ–±—ä–µ–∫—Ç–∞–º! "
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä, "
        "–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.",
        reply_markup=create_main_keyboard()
    )
    
    await callback.answer()
    log_user_action(callback.from_user.id, callback.from_user.username, "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞")

@router.message(SearchStates.viewing_listings)
@error_handler(operation_name="–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞")
async def handle_text_during_search(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä–µ–∫—Ç–æ–≤.
    """
    if message.text and message.text.lower() in ['–≤—ã—Ö–æ–¥', '–∑–∞–≤–µ—Ä—à–∏—Ç—å', '—Å—Ç–æ–ø']:
        await end_search(message, state)
        return
    
    await message.reply(
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º.\n\n"
        "‚Ä¢ ‚¨ÖÔ∏è‚û°Ô∏è - –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏\n"
        "‚Ä¢ üì∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n"
        "‚Ä¢ üìã - –ø–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä\n"
        "‚Ä¢ ‚ùå - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞\n\n"
        "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞.",
        reply_markup=None
    )
    log_user_action(message.from_user.id, message.from_user.username, "–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞")