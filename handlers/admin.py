"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞.
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –≤–∫–ª—é—á–∞—è –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π,
—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞—è–≤–æ–∫ –∏ –∏—Å—Ç–æ—Ä–∏–∏.
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from config import ADMIN_ID
import logging
from datetime import datetime
import sqlite3
from services.sheets import GoogleSheetsService

from services.error_handler import error_handler  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä

router = Router()
logger = logging.getLogger(__name__)

# –§–∏–ª—å—Ç—Ä –¥–ª—è –∞–¥–º–∏–Ω–∞
def is_admin(user_id):
    return user_id in ADMIN_ID if isinstance(ADMIN_ID, (list, tuple)) else user_id == ADMIN_ID

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É actions, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    """
    try:
        with sqlite3.connect('user_actions.db') as conn:
            conn.execute('''CREATE TABLE IF NOT EXISTS actions
                           (id INTEGER PRIMARY KEY AUTOINCREMENT,
                            user_id INTEGER,
                            username TEXT,
                            action TEXT,
                            timestamp TEXT)''')
            conn.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö user_actions.db –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def log_user_action(user_id, username, action):
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –≤ –ª–æ–≥–≥–µ—Ä.
    """
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    action_str = f"ID: {user_id} (@{username or 'no_username'}) - {action} - {timestamp}"
    try:
        with sqlite3.connect('user_actions.db') as conn:
            conn.execute("INSERT INTO actions (user_id, username, action, timestamp) VALUES (?, ?, ?, ?)",
                         (user_id, username or 'no_username', action, timestamp))
            conn.commit()
        logger.info(action_str)
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è: {e}")
        raise

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
def get_user_actions(limit=10):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        with sqlite3.connect('user_actions.db') as conn:
            cursor = conn.execute("SELECT user_id, username, action, timestamp FROM actions ORDER BY id DESC LIMIT ?", (limit,))
            return [f"ID: {row[0]} (@{row[1]}) - {row[2]} - {row[3]}" for row in cursor.fetchall()]
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        raise

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞—è–≤–æ–∫ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
async def get_request_stats():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞—è–≤–æ–∫ –∏–∑ Google Sheets.
    """
    sheets_service = GoogleSheetsService()
    requests = await sheets_service.get_all_requests()
    if not requests:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—è–≤–∫–∞—Ö."
    total_requests = len(requests)
    unique_users = len(set(req.get("user_id") for req in requests))
    return f"–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total_requests}\n–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}"

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫
async def get_request_history(limit=10):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏–∑ Google Sheets.
    """
    sheets_service = GoogleSheetsService()
    requests = await sheets_service.get_all_requests()
    if not requests:
        return "–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫."
    sorted_requests = sorted(requests, key=lambda x: x.get("timestamp", ""), reverse=True)[:limit]
    return "\n".join([f"ID: {req.get('user_id')} - {req.get('timestamp')} - {req.get('property_id')}" for req in sorted_requests])

# –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
def clear_user_actions():
    """
    –û—á–∏—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    try:
        with sqlite3.connect('user_actions.db') as conn:
            conn.execute("DELETE FROM actions")
            conn.commit()
        logger.info("–õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—á–∏—â–µ–Ω—ã")
        return "–õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã."
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤: {e}")
        raise

@router.message(Command("admin"))
@error_handler(operation_name="–û—Ç–∫—Ä—ã—Ç–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (/admin)")
async def admin_panel(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üë• –î–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="view_actions"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫", callback_data="view_stats")
        ],
        [
            InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫", callback_data="view_requests"),
            InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", callback_data="clear_logs")
        ]
    ])
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=keyboard)
    log_user_action(message.from_user.id, message.from_user.username, "–û—Ç–∫—Ä—ã—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")

@router.callback_query(lambda c: c.data == "view_actions")
@error_handler(operation_name="–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def view_user_actions(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    actions = get_user_actions()
    if not actions:
        await callback.message.edit_text("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    else:
        actions_text = "\n".join(actions)
        await callback.message.edit_text(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{actions_text}")
    await callback.answer()

@router.callback_query(lambda c: c.data == "view_stats")
@error_handler(operation_name="–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞—è–≤–æ–∫")
async def view_request_stats(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞—è–≤–æ–∫.
    """
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    stats = await get_request_stats()
    await callback.message.edit_text(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫:\n{stats}")
    await callback.answer()

@router.callback_query(lambda c: c.data == "view_requests")
@error_handler(operation_name="–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫")
async def view_request_history(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫.
    """
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    history = await get_request_history()
    await callback.message.edit_text(f"–ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫:\n{history}")
    await callback.answer()

@router.callback_query(lambda c: c.data == "clear_logs")
@error_handler(operation_name="–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤")
async def confirm_clear_logs(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤.
    """
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_clear"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_clear")
        ]
    ])
    await callback.message.edit_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π?", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(lambda c: c.data == "confirm_clear")
@error_handler(operation_name="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤")
async def execute_clear_logs(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    result = clear_user_actions()
    await callback.message.edit_text(result)
    await callback.answer()

@router.callback_query(lambda c: c.data == "cancel_clear")
@error_handler(operation_name="–û—Ç–º–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤")
async def cancel_clear_logs(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤.
    """
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    await callback.message.edit_text("–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()

@router.callback_query(F.data.startswith("interested_"))
@error_handler(operation_name="–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –æ–±—ä–µ–∫—Ç—É")
async def log_interested(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –æ–±—ä–µ–∫—Ç—É.
    """
    if is_admin(callback.from_user.id):
        await callback.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return
    listing_id = callback.data.replace("interested_", "")
    action = f"–ü–æ–∫–∞–∑–∞–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –æ–±—ä–µ–∫—Ç—É ID: {listing_id}"
    log_user_action(callback.from_user.id, callback.from_user.username, action)
    await callback.answer("–í–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∫ –æ–±—ä–µ–∫—Ç—É –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω!")