import asyncio
import logging
import sys
import os
from typing import Any, Awaitable, Callable, Dict

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.exceptions import TelegramAPIError
from redis.asyncio import Redis

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, os.getenv("LOGGING_LEVEL", "INFO").upper()),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename=os.getenv("LOG_FILE", "bot.log"),
    encoding='utf-8'  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
)
logger = logging.getLogger(__name__)

# –°–Ω–∏–∂–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫ aiogram, —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å —à—É–º
logging.getLogger('aiogram').setLevel(logging.WARNING)
logging.getLogger('aiohttp').setLevel(logging.WARNING)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
from config import BOT_TOKEN, validate_config, ADMIN_ID, SPREADSHEET_ID, LOG_FILE, DATABASE_FILE
from handlers import admin, request, start, calculators
from services.sheets import google_sheets_service

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –¥–ª—è FSM
redis = Redis(
    host=os.getenv("REDIS_HOST", "localhost"),
    port=int(os.getenv("REDIS_PORT", 14988)),
    password=os.getenv("REDIS_PASSWORD", None),
    db=0
)
storage = RedisStorage(redis)

async def setup_bot_commands(bot: Bot):
    from aiogram.types import BotCommand
    commands = [
        BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å"),
        BotCommand(command="cancel", description="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"),
        BotCommand(command="admin", description="üõ† –ö–∞–±–∏–Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
        BotCommand(command="calculators", description="üìä –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã")
    ]
    await bot.set_my_commands(commands)

def register_handlers(dp: Dispatcher):
    dp.include_router(admin.router)
    dp.include_router(request.router)
    dp.include_router(calculators.router)
    dp.include_router(start.router)

def setup_global_error_handler(dp: Dispatcher):
    @dp.errors()
    async def errors_handler(event: TelegramAPIError):
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ Telegram API: {event}")
        return True

async def on_startup(bot: Bot):
    bot_info = await bot.get_me()  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{bot_info.username} ({bot_info.full_name})")
    await setup_bot_commands(bot)
    logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis: {await redis.ping()}")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
    test_properties = await google_sheets_service.get_all_properties()
    logger.info(f"Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(test_properties) if test_properties else 0} –æ–±—ä–µ–∫—Ç–æ–≤")
    from handlers.admin import init_db
    init_db()

async def on_shutdown(bot: Bot):
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    await google_sheets_service.close()
    await redis.close()
    await bot.session.close()

def create_bot() -> Bot:
    if not BOT_TOKEN:
        raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    return Bot(
        token=BOT_TOKEN,
        default=DefaultBotProperties(
            parse_mode=ParseMode.HTML,
            protect_content=False,
        )
    )

def create_dispatcher() -> Dispatcher:
    return Dispatcher(storage=storage)

async def main():
    try:
        validate_config()
        bot = create_bot()
        dp = create_dispatcher()
        setup_global_error_handler(dp)
        register_handlers(dp)
        dp.startup.register(on_startup)
        dp.shutdown.register(on_shutdown)
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await dp.start_polling(bot, skip_updates=True, handle_signals=True)
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        sys.exit(1)