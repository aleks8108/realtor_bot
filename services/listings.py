"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.
–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º, –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –£—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
–º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏ search –∏ request.
"""

import logging
from typing import List, Dict, Any, Optional, Tuple
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext

from services.sheets import google_sheets_service
from utils.keyboards import get_listing_menu, get_main_menu
from utils.validators import DataValidator
from exceptions.custom_exceptions import ListingNotFoundError, PhotoProcessingError
from config import ADMIN_ID

logger = logging.getLogger(__name__)


class ListingService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –æ–±—ä–µ–∫—Ç–∞–º–∏.
    """
    
    @staticmethod
    async def get_filtered_listings(search_criteria: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø–æ–∏—Å–∫–∞.
        
        Args:
            search_criteria: –°–ª–æ–≤–∞—Ä—å —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –ø–æ–∏—Å–∫–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        """
        logger.info(f"–ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏: {search_criteria}")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è Google Sheets
        filters = ListingService._convert_search_criteria_to_filters(search_criteria)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        listings = await google_sheets_service.get_listings(filters)
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(listings)} –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º")
        return listings
    
    @staticmethod
    def _convert_search_criteria_to_filters(criteria: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ Google Sheets.
        
        Args:
            criteria: –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è Google Sheets —Å–µ—Ä–≤–∏—Å–∞
        """
        filters = {}
        
        # –¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        if 'property_type' in criteria:
            property_type = criteria['property_type'].replace('property_type_', '') if criteria['property_type'].startswith('property_type_') else criteria['property_type']
            filters['property_type'] = property_type
        
        # –¢–∏–ø —Å–¥–µ–ª–∫–∏
        if 'deal_type' in criteria:
            deal_type = criteria['deal_type'].replace('deal_type_', '') if criteria['deal_type'].startswith('deal_type_') else criteria['deal_type']
            filters['deal_type'] = deal_type
        
        # –†–∞–π–æ–Ω
        if 'district' in criteria:
            district = criteria['district'].replace('district_', '') if criteria['district'].startswith('district_') else criteria['district']
            filters['district'] = district
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç
        if 'rooms' in criteria and criteria['rooms']:
            filters['rooms'] = criteria['rooms']
        
        # –ë—é–¥–∂–µ—Ç - –∏–∑–≤–ª–µ–∫–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
        if 'budget' in criteria:
            budget_str = criteria['budget'].replace('budget_', '') if criteria['budget'].startswith('budget_') else criteria['budget']
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "5000000-10000000" -> 10000000)
                if '-' in budget_str:
                    max_price = budget_str.split('-')[-1]
                else:
                    max_price = budget_str
                filters['max_price'] = float(max_price)
            except (ValueError, IndexError):
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±—é–¥–∂–µ—Ç: {budget_str}")
        
        return filters
    
    @staticmethod
    async def show_listing(
        message: Message, 
        state: FSMContext, 
        listing_index: int = 0,
        photo_index: int = 0,
        comments_provided: bool = False
    ) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π.
        
        Args:
            message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
            listing_index: –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            photo_index: –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            comments_provided: –ë—ã–ª–∏ –ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        """
        data = await state.get_data()
        filtered_listings = data.get('filtered_listings', [])
        
        if not filtered_listings:
            await message.answer(
                "–û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.",
                reply_markup=get_main_menu()
            )
            return
        
        if listing_index >= len(filtered_listings):
            logger.error(f"–ò–Ω–¥–µ–∫—Å –æ–±—ä–µ–∫—Ç–∞ {listing_index} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ {len(filtered_listings)}")
            listing_index = 0
        
        listing = filtered_listings[listing_index]
        photo_urls = DataValidator.validate_photo_urls(listing.get('photo_url', []))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = ListingService._format_listing_message(
            listing, listing_index + 1, len(filtered_listings)
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = get_listing_menu(
            listing_exists=True,
            comments_provided=comments_provided,
            has_next_listing=listing_index < len(filtered_listings) - 1,
            listing_index=listing_index,
            photo_index=photo_index,
            total_photos=len(photo_urls),
            total_listings=len(filtered_listings),
            listing_id=listing['id']
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
        await message.answer(message_text, reply_markup=keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
        if photo_urls and photo_index < len(photo_urls):
            try:
                await message.answer_photo(photo=photo_urls[photo_index])
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è {photo_index + 1}/{len(photo_urls)} –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {listing['id']}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ {photo_urls[photo_index]}: {e}")
                await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –æ–±—ä–µ–∫—Ç–∞")
    
    @staticmethod
    def _format_listing_message(listing: Dict[str, Any], current_num: int, total_num: int) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±—ä–µ–∫—Ç–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.
        
        Args:
            listing: –î–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞
            current_num: –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            total_num: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        price_formatted = f"{listing['price']:,.0f}".replace(',', ' ')
        
        message = f"üè† –û–±—ä–µ–∫—Ç {current_num}/{total_num}\n"
        message += f"üÜî ID: {listing['id']}\n"
        message += f"üè¢ –¢–∏–ø: {listing['property_type']}\n"
        message += f"üíº –°–¥–µ–ª–∫–∞: {listing['deal_type']}\n"
        message += f"üìç –†–∞–π–æ–Ω: {listing['district']}\n"
        message += f"üí∞ –¶–µ–Ω–∞: {price_formatted} ‚ÇΩ\n"
        
        if listing.get('rooms') and str(listing['rooms']).strip():
            message += f"üõè –ö–æ–º–Ω–∞—Ç: {listing['rooms']}\n"
        
        message += f"\nüìù {listing.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}"
        
        return message
    
    @staticmethod
    async def handle_photo_navigation(
        callback: CallbackQuery, 
        state: FSMContext, 
        direction: str,
        target_listing_index: int,
        target_photo_index: int
    ) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º –æ–±—ä–µ–∫—Ç–∞.
        
        Args:
            callback: –û–±—ä–µ–∫—Ç callback –∑–∞–ø—Ä–æ—Å–∞
            state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ('next' –∏–ª–∏ 'prev')
            target_listing_index: –¶–µ–ª–µ–≤–æ–π –∏–Ω–¥–µ–∫—Å –æ–±—ä–µ–∫—Ç–∞
            target_photo_index: –¶–µ–ª–µ–≤–æ–π –∏–Ω–¥–µ–∫—Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        """
        data = await state.get_data()
        filtered_listings = data.get('filtered_listings', [])
        
        if not filtered_listings or target_listing_index >= len(filtered_listings):
            await callback.answer("–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        listing = filtered_listings[target_listing_index]
        photo_urls = DataValidator.validate_photo_urls(listing.get('photo_url', []))
        
        if not photo_urls:
            await callback.answer("–£ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")
            return
        
        if target_photo_index < 0:
            await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ.")
            return
        
        if target_photo_index >= len(photo_urls):
            await callback.answer("–ë–æ–ª—å—à–µ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            current_listing_index=target_listing_index,
            current_photo_index=target_photo_index
        )
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await callback.message.delete()
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º caption –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        caption = ListingService._format_photo_caption(
            listing, target_listing_index + 1, len(filtered_listings),
            target_photo_index + 1, len(photo_urls)
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = get_listing_menu(
            listing_exists=True,
            comments_provided=bool(data.get('comments')),
            has_next_listing=target_listing_index < len(filtered_listings) - 1,
            listing_index=target_listing_index,
            photo_index=target_photo_index,
            total_photos=len(photo_urls),
            total_listings=len(filtered_listings),
            listing_id=listing['id']
        )
        
        try:
            await callback.message.answer_photo(
                photo=photo_urls[target_photo_index],
                caption=caption,
                reply_markup=keyboard
            )
            logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–æ —Ñ–æ—Ç–æ {target_photo_index + 1}/{len(photo_urls)} –æ–±—ä–µ–∫—Ç–∞ {listing['id']}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}")
            raise PhotoProcessingError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é", photo_urls[target_photo_index])
        
        await callback.answer()
    
    @staticmethod
    def _format_photo_caption(
        listing: Dict[str, Any], 
        listing_num: int, 
        total_listings: int,
        photo_num: int, 
        total_photos: int
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å—å –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–±—ä–µ–∫—Ç–∞.
        
        Args:
            listing: –î–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞
            listing_num: –ù–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞
            total_listings: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤
            photo_num: –ù–æ–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            total_photos: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å
        """
        price_formatted = f"{listing['price']:,.0f}".replace(',', ' ')
        
        caption = f"üè† –û–±—ä–µ–∫—Ç {listing_num}/{total_listings} | üì∏ –§–æ—Ç–æ {photo_num}/{total_photos}\n"
        caption += f"üÜî ID: {listing['id']}\n"
        caption += f"üí∞ –¶–µ–Ω–∞: {price_formatted} ‚ÇΩ\n"
        caption += f"üìç {listing['district']}\n\n"
        caption += f"üìù {listing.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}"
        
        return caption
    
    @staticmethod
    async def handle_listing_navigation(
        callback: CallbackQuery,
        state: FSMContext,
        target_listing_index: int
    ) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.
        
        Args:
            callback: –û–±—ä–µ–∫—Ç callback –∑–∞–ø—Ä–æ—Å–∞
            state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
            target_listing_index: –ò–Ω–¥–µ–∫—Å —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        """
        data = await state.get_data()
        filtered_listings = data.get('filtered_listings', [])
        
        if not filtered_listings:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.")
            return
        
        if target_listing_index < 0:
            await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç.")
            return
        
        if target_listing_index >= len(filtered_listings):
            await callback.answer("–ë–æ–ª—å—à–µ –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            current_listing_index=target_listing_index,
            current_photo_index=0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
        )
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await callback.message.delete()
        except Exception:
            pass
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
        await ListingService.show_listing(
            callback.message, 
            state, 
            target_listing_index, 
            0,
            bool(data.get('comments'))
        )
        
        await callback.answer()
    
    @staticmethod
    async def handle_interest(
        callback: CallbackQuery,
        state: FSMContext,
        listing_id: str
    ) -> Tuple[bool, Optional[Dict[str, Any]]]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –æ–±—ä–µ–∫—Ç—É.
        
        Args:
            callback: –û–±—ä–µ–∫—Ç callback –∑–∞–ø—Ä–æ—Å–∞
            state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
            listing_id: ID –æ–±—ä–µ–∫—Ç–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–æ—è–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–µ—Å
            
        Returns:
            Tuple[—É—Å–ø–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–∏, –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞]
        """
        data = await state.get_data()
        filtered_listings = data.get('filtered_listings', [])
        
        # –ù–∞—Ö–æ–¥–∏–º –æ–±—ä–µ–∫—Ç –ø–æ ID
        listing = next((l for l in filtered_listings if str(l['id']) == str(listing_id)), None)
        
        if not listing:
            await callback.answer("–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return False, None
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if ADMIN_ID:
            try:
                admin_message = (
                    f"üî• –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –æ–±—ä–µ–∫—Ç—É!\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.id} (@{callback.from_user.username or 'no_username'})\n"
                    f"üÜî ID –æ–±—ä–µ–∫—Ç–∞: {listing_id}\n"
                    f"üè¢ –¢–∏–ø: {listing['property_type']}\n"
                    f"üìç –†–∞–π–æ–Ω: {listing['district']}\n"
                    f"üí∞ –¶–µ–Ω–∞: {listing['price']:,.0f} ‚ÇΩ\n\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {listing.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
                )
                
                await callback.bot.send_message(ADMIN_ID[0], admin_message)
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–Ω—Ç–µ—Ä–µ—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {listing_id}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
        
        await callback.answer("–í–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.")
        return True, listing